---
import SaltoPlayLayout from "@/layouts/SaltoPlayLayout.astro";
import {
  getOauthClient,
  AVAILABLE_SCOPES,
  BEAUTIFUL_SCOPES,
  getBeautifulScopes,
} from "@/lib/saltoplay/oauth";
import { getSession } from "auth-astro/server";
import {
  LucideAward,
  LucideBadgeHelp,
  LucideChevronRight,
  LucideChevronsLeftRightEllipsis,
  LucideCircleX,
  LucideIdCard,
  LucideUsers,
} from "lucide-preact";

const session = await getSession(Astro.request);

if (!session) {
  const originalUrl = new URL(Astro.request.url);
  return Astro.redirect(
    `/?login=true&redirect=${encodeURIComponent(originalUrl.pathname)}`,
    302
  );
}

// Obtener los parámetros de búsqueda de la URL
const clientId = Astro.url.searchParams.get("client_id");
const redirectUri = Astro.url.searchParams.get("redirect_uri");
const responseType = Astro.url.searchParams.get("response_type");
const scope = Astro.url.searchParams.get("scope");

// Verificación básica de los parámetros
if (!clientId || !redirectUri || !responseType || !scope) {
  return Astro.redirect("/gamecenter/oauth/error?error=invalid_request");
}

// Mapeo de parámetros a camelCase si es necesario
const params = {
  clientId,
  redirectUri,
  responseType,
  scope,
};

// Obtener el cliente de OAuth
const client = await getOauthClient(params.clientId);

// Verificación de cliente
if (!client) {
  return Astro.redirect("/gamecenter/oauth/error?error=invalid_client");
}

// Verificación de URI de redirección
if (client.redirectUri !== params.redirectUri) {
  return Astro.redirect("/gamecenter/oauth/error?error=mismatch_redirect_uri");
}

// Verificación de tipo de respuesta
if (params.responseType !== "code") {
  return Astro.redirect(
    "/gamecenter/oauth/error?error=unsupported_response_type"
  );
}

// Procesamiento del scope
const scopes = params.scope.split(" ");

const RANDOM_FAKE_SCOPE_PHRASES = [
  "Hacer un asado con los pibes",
  "Resolver un misterio con Scooby Doo",
  "Hacer un truco de magia con una carta",
  "Traerte un café",
];

const invalidScopes = scopes.filter((s) => !AVAILABLE_SCOPES.includes(s));
if (invalidScopes.length > 0) {
  return Astro.redirect(
    `/gamecenter/oauth/error?error=invalid_scope&scope=${encodeURIComponent(
      invalidScopes.join(" ")
    )}`
  );
}

const getBeautifulScope = (scope: string) => {
  const beautifulScope =
    BEAUTIFUL_SCOPES[scope as keyof typeof BEAUTIFUL_SCOPES];
  return beautifulScope
    ? beautifulScope
    : {
        name: scope,
        description: "Descripción no disponible",
        icon: LucideBadgeHelp,
      };
};

const beautifulScopes = scopes.map((scope) => {
  const beautifulScope = getBeautifulScope(scope);
  return {
    ...beautifulScope,
    icon: beautifulScope.icon,
  };
});
---

<SaltoPlayLayout
  title={`Autorizar "${client.name}"`}
  description={`Autorizar "${client.name}" para acceder a tu cuenta de SaltoUruguayServer`}
>
  <img
    src="/images/oauth_wallpaper.webp"
    alt="SaltoUruguayServer"
    class="absolute inset-0 object-cover w-full h-full opacity-30 blur-sm -z-10"
  />
  <div
    role="main"
    class="mx-auto flex justify-center items-center min-h-screen h-full"
  >
    <article
      class="border border-dashed border-neutral-500 rounded-md px-6 py-2 max-w-md w-full bg-neutral-950"
    >
      <header class="py-4 flex flex-col">
        <h2 class="text-lg mt-2 text-center items-center gap-2">
          <strong class="text-indigo-300">{client.name}</strong> quiere acceder a
          tu cuenta de SaltoUruguayServer
        </h2>
        <div
          class="flex items-center mb-4 mt-4 justify-between gap-4 relative w-max mx-auto"
        >
          <img
            src="/favicon.svg"
            alt="SaltoUruguayServer"
            class="h-16 w-auto saturate-150 object-contain aspect-square bg-gradient-to-br p-3 from-indigo-800 via-slate-500/30 to-slate-700/50 rounded-md"
          />
          <LucideChevronsLeftRightEllipsis
            class="h-8 w-auto object-contain aspect-square text-zinc-500 animate-pulse"
          />
          <img
            src={client.icon ??
              `https://ui-avatars.com/api/?name=${client.name}&background=random`}
            alt={client.name}
            class="h-16 w-auto object-cover aspect-square rounded-md"
          />
        </div>
      </header>
      <div class="p-6 pt-0 space-y-6">
        <div
          class="flex items-center gap-3 bg-zinc-900 p-2 px-6 rounded-lg mx-auto"
        >
          <span
            class="relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full"
            ><img
              class="aspect-square h-full w-full"
              alt="Avatar"
              src="https://images-eds-ssl.xboxlive.com/image?url=KT_QTPJeC5ZpnbX.xahcbrZ9enA_IV9WfFEWIqHGUb5P30TpCdy9xIzUMuqZVCfbt5wf2r6a_T.R4mCVmV.NX0B66rPz36mfD1AH.ZlwmVw.heTEF5WZFhtnJN123J5av890uk3h6hYvHu0MiyRVm0Oh6SwLV6eKeoB8lgp37UY-&format=png"
            /></span
          ><div class="hidden md:block">
            <p class="text-sm font-medium">Alexitoo</p><p
              class="text-xs text-muted-foreground"
            >
              alexitoo_uy#5190
            </p>
          </div><div
            class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-accent hover:text-accent-foreground h-8 w-8"
          >
          </div>
        </div>

        <button
          class="text-sm text-white/75 text-center mt-4 crusor-pointer mx-auto"
        >
          ¿No eres tú? <span class="text-indigo-300">Cambia de cuenta</span>
        </button>

        <p
          class="text-white/75 text-sm text-balance text-center mt-4 max-w-[48ch]"
        >
          Al hacer clic en "Autorizar" estás dando permiso a <strong
            >{client.name}</strong
          > para
        </p>

        {
          scopes && scopes.length > 0 && (
            <ul class="text-white/75 text-sm text-balance text-center mt-4 max-w-[48ch] flex flex-col gap-2">
              {beautifulScopes.map((scope) => (
                <li class="flex items-center gap-2">
                  <scope.icon class="h-4 w-4 text-indigo-300" />
                  {scope.name}
                </li>
              ))}
              <li class="flex items-center gap-2 opacity-60">
                <LucideCircleX class="h-4 w-4 text-red-500" />
                {
                  RANDOM_FAKE_SCOPE_PHRASES[
                    Math.floor(Math.random() * RANDOM_FAKE_SCOPE_PHRASES.length)
                  ]
                }
              </li>
            </ul>
          )
        }

        <footer class="items-center p-6 pt-0 flex flex-col gap-2">
          <button
            id="authorize"
            data-client-id={clientId}
            data-redirect-uri={redirectUri}
            data-scope={scope}
            data-state={session.user.id}
            class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium h-10 px-4 py-2 w-full bg-indigo-800 hover:bg-indigo-600 transition text-white"
          >
            Autorizar
            <LucideChevronRight class="ml-2 h-4 w-4" />
          </button>
        </footer>
      </div>
    </article>
  </div>
</SaltoPlayLayout>

<script>
  import { $ } from "@/lib/dom-selector";
  import { actions, type ActionReturnType, type Actions } from "astro:actions";
  import { toast } from "sonner";

  document.addEventListener("astro:page-load", () => {
    const $authorizeBtn = document.querySelector(
      "#authorize"
    ) as HTMLButtonElement;

    if (!$authorizeBtn) return;

    $authorizeBtn.addEventListener("click", async () => {
      const { clientId, redirectUri, scope } = $authorizeBtn.dataset;
      if (!clientId || !redirectUri) {
        console.error("Faltan parámetros obligatorios para la autorización.");
        return;
      }

      const scopes = scope?.split(" ") ?? [];

      toast.promise(
        actions.users.oauth.authorize({ clientId, redirectUri, scopes }),
        {
          loading: "Autorizando...",
          success: ({
            data,
            error,
          }: ActionReturnType<Actions["users"]["oauth"]["authorize"]>) => {
            if (error) {
              console.error("Error al autorizar:", error);
              throw new Error(error.message);
            }
            if (!data?.redirectUri)
              throw new Error("No se pudo completar la autorización.");

            window.location.href = data.redirectUri.toString();
            return "Autorización exitosa";
          },
          error: (err: string) => {
            console.error("Error al autorizar:", err);
            return err;
          },
        }
      );
    });
  });
</script>
