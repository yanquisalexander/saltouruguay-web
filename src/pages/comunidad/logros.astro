---
import { ACHIEVEMENTS, ACHIEVEMENTS_TEXTS } from "@/consts/Achievements";
import Layout from "@/layouts/Layout.astro";
import { getUserAchievements } from "@/utils/user";
import { getSession } from "auth-astro/server";
import { LucideLockKeyhole } from "lucide-preact";

const session = await getSession(Astro.request);

if (!session) {
  return new Response(null, {
    status: 404,
  });
}

const userAchievements = await getUserAchievements(session.user.id);
---

<Layout
  title="Mis Logros"
  description="Descubre los logros que has desbloqueado."
>
  <div class="flex flex-col max-w-5xl mx-auto min-h-screen mt-16">
    <header class="relative z-10 flex flex-col h-full">
      <div class="flex items-center gap-x-8 flex-col md:flex-row gap-y-6">
        <div class="flex flex-col">
          <h1
            class="text-4xl font-bold font-rubik uppercase text-center md:text-left"
          >
            Mis Logros
          </h1>
          <p class="text-center md:text-left">
            Aquí encontrarás todos los logros que has desbloqueado
          </p>
        </div>
      </div>
    </header>

    <div class="flex flex-col pb-16">
      <div class="block max-w-xs mt-20">
        <div class="block pb-2 text-xs font-medium">
          Desbloqueaste
          <span class="font-bold">{userAchievements.length}</span> de {
            Object.keys(ACHIEVEMENTS).length
          } logros. ¡Seguí así!
        </div>
        <div class="relative w-full h-1 mb-4 bg-gray-700 rounded-full">
          <div
            class="h-1 rounded-full duration-300 bg-green-400"
            style={{
              width: `${(userAchievements.length / Object.keys(ACHIEVEMENTS).length) * 100}%`,
            }}
          >
          </div>
        </div>
      </div>

      <ul
        class="grid grid-cols-1 gap-8 mt-12 sm:grid-cols-2 md:grid-cols-3 max-w-2xl mx-auto mb-16"
      >
        {
          Object.keys(ACHIEVEMENTS).map((key) => {
            // @ts-ignore
            const achievement = ACHIEVEMENTS[key];

            const achievementText = ACHIEVEMENTS_TEXTS.find(
              (achievementText) => achievementText.id === achievement
            );

            const unlockedAt = userAchievements.find(
              (userAchievement) => userAchievement.achievementId === achievement
            )?.unlockedAt;

            const iconUrl = `/images/achievements/${achievement}.svg`;

            return (
              <li class="flex flex-col text-center transition hover:scale-105 hover:contrast-125  group">
                <picture class="block mb-2 p-2 w-full aspect-square bg-white/10 rounded-lg border-4 relative border-yellow-300">
                  <img
                    src={iconUrl}
                    alt={`Ilustración de ${achievementText?.title}`}
                    class="block w-full aspect-square"
                  />
                  {!unlockedAt && (
                    <div class="absolute inset-0 flex items-center justify-center bg-black/70 rounded-lg flex-col">
                      <LucideLockKeyhole
                        size={64}
                        className="text-yellow-300"
                      />
                      <span class="block mt-2 text-yellow-300">Bloqueado</span>
                    </div>
                  )}
                </picture>
                <div
                  class={`group-hover:opacity-100 transition-opacity ${unlockedAt ? "opacity-100" : "opacity-70"}`}
                >
                  <h2 class="text-xl font-rubik text-blue-300">
                    {achievementText?.title}
                  </h2>
                  {unlockedAt && (
                    <span class="text-xs opacity-70 font-medium">
                      Desbloqueado el{" "}
                      {new Date(unlockedAt).toLocaleDateString("es-ES", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </span>
                  )}
                  {achievementText && (
                    <p class="text-sm">{achievementText.description}</p>
                  )}
                </div>
              </li>
            );
          })
        }
      </ul>
    </div>
  </div>
</Layout>
