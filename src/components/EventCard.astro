---
import {
  LucideUsers,
  LucideCalendar,
  LucideClock,
  LucideStar,
} from "lucide-preact";
import { DateTime } from "luxon";
import type { getEventById } from "@/lib/events";
import { Badge, InfoRow } from "./EventCard";

interface Props {
  firstFeaturedEvent?: boolean;
  event: Awaited<ReturnType<typeof getEventById>>;
}

const { firstFeaturedEvent = false, event } = Astro.props;

if (!event) return null;

// Format the date for display
const formattedDate = DateTime.fromISO(event.startDate.toISOString())
  .setLocale("es")
  .toFormat("EEEE, dd 'de' LLLL 'a las' HH:mm");

// Store the dates as data attributes for client-side processing
const startDateISO = event.startDate.toISOString();
const endDateISO = event.endDate ? event.endDate.toISOString() : "";
---

<a
  href={`/eventos/${event.id}`}
  class:list={[
    "rounded-lg border shadow-sm hover:saturate-150 hover:scale-105 duration-300 cursor-pointer transition",
    firstFeaturedEvent
      ? "col-span-full bg-gradient-to-br border-neutral-600 from-electric-violet-500/10 via-yellow-500/10"
      : "border-neutral-500/50 bg-neutral-500/5",
  ]}
>
  <div class="flex flex-col space-y-1.5 p-4 sm:p-6 pb-4">
    <div
      class="flex flex-col sm:flex-row justify-between items-start gap-2 sm:gap-0"
    >
      <div class="space-y-1 w-full sm:w-auto">
        <div class="flex flex-wrap items-center gap-2">
          {
            event.featured && (
              <Badge
                icon={LucideStar}
                text="Destacado"
                className="bg-primary text-primary-foreground"
              />
            )
          }
          <div
            class="event-status-badge"
            data-start-date={startDateISO}
            data-end-date={endDateISO}
          >
          </div>
          <Badge
            text="Stream especial"
            className="bg-purple-500/10 text-purple-500"
          />
        </div>
        <h2 class="text-xl sm:text-2xl font-rubik font-semibold pt-2">
          {event.name}
        </h2>
      </div>
      <div class="flex flex-col items-start sm:items-end mt-2 sm:mt-0">
        <InfoRow
          icon={LucideUsers}
          text={`${event.assistants.length} confirmados`}
        />
        <InfoRow icon={LucideCalendar} text={formattedDate} />
      </div>
    </div>
    <div class="flex flex-col sm:flex-row items-start gap-4 mt-4">
      <img
        src={event.cover || "/og.webp"}
        alt={`Portada de ${event.name}`}
        width={240}
        height={140}
        class="rounded-md object-cover w-full aspect-video max-w-[200px] sm:w-60 h-auto"
      />
      <div class="flex-1 flex flex-col mt-3 sm:mt-0">
        <p class="text-sm">{event.description}</p>
        <div class="mt-4 space-y-2">
          <div class="flex flex-col gap-1 text-sm">
            <span class="font-semibold">Organizador</span>
            <div class="flex items-center gap-2">
              <img
                src={event.mainOrganizer.avatar!}
                alt="Organizador"
                class="w-6 h-6 rounded-full"
              />
              <span class="font-semibold"
                >{event.mainOrganizer.displayName}</span
              >
            </div>
          </div>
          {event.platform && <InfoRow text="Plataforma: Twitch" />}
        </div>
      </div>
    </div>
    <div
      class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-0 mt-4"
    >
      <div
        class="event-time-status flex items-center gap-1 text-sm"
        data-start-date={startDateISO}
        data-end-date={endDateISO}
      >
        <LucideClock class="h-4 w-4" />
        <span>Calculando...</span>
      </div>
      {
        event.url && (
          <a
            href={event.url}
            target="_blank"
            rel="noopener noreferrer"
            class="w-full sm:w-auto inline-flex items-center justify-center gap-2 px-4 py-2 rounded-md text-sm font-medium text-white bg-green-600 hover:bg-green-700 text-center"
          >
            Unirme al stream
          </a>
        )
      }
    </div>
  </div>
</a>

<script>
  import { $$ } from "@/lib/dom-selector";
  import { DateTime } from "luxon";

  document.addEventListener("astro:page-load", () => {
    // Process all time status elements
    const $$timeStatusElements = $$(".event-time-status");
    const $$statusBadgeElements = $$(".event-status-badge");

    const getTimeStatus = (startDate: string, endDate?: string) => {
      const now = DateTime.local();
      const start = DateTime.fromISO(startDate).setZone("local");
      const end = endDate ? DateTime.fromISO(endDate).setZone("local") : null;

      if (now < start)
        return { status: 0, text: start.toRelative() || "Próximamente" };
      if (end && now > end)
        return { status: 2, text: `Finalizado ${end.toRelative() || ""}` };
      return {
        status: 1,
        text: `En curso desde ${start.toRelative() || ""} hasta ${end?.toRelative() || ""}`,
      };
    };

    // Update time status displays
    $$timeStatusElements.forEach((element) => {
      const startDate = element.getAttribute("data-start-date");
      const endDate = element.getAttribute("data-end-date");

      if (startDate) {
        const status = getTimeStatus(startDate, endDate || undefined);
        const statusSpan = element.querySelector("span");

        if (statusSpan) {
          statusSpan.textContent = status.text;
        }

        // Apply the correct color based on status
        element.classList.remove(
          "text-green-500",
          "text-yellow-500",
          "text-red-500"
        );
        if (status.status === 0) {
          element.classList.add("text-green-500");
        } else if (status.status === 1) {
          element.classList.add("text-yellow-500");
        } else {
          element.classList.add("text-red-500");
        }
      }
    });

    // Create and insert status badges
    $$statusBadgeElements.forEach((element) => {
      const startDate = element.getAttribute("data-start-date");
      const endDate = element.getAttribute("data-end-date");

      if (startDate) {
        const status = getTimeStatus(startDate, endDate || undefined);

        let badge = document.createElement("div");
        badge.className =
          "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold";

        // Create icon if needed
        let iconElement = "";
        if (status.status === 2) {
          iconElement =
            '<svg class="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><polyline points="12 6 12 12 16 14"/></svg>';
        }

        // Set content and styles based on status
        if (status.status === 0) {
          badge.className += " bg-blue-500/10 text-blue-500";
          badge.innerHTML = `${iconElement}Próximo`;
        } else if (status.status === 1) {
          badge.className += " bg-yellow-500/10 text-yellow-500";
          badge.innerHTML = `${iconElement}En curso`;
        } else {
          badge.className += " bg-red-500/10 text-red-500";
          badge.innerHTML = `${iconElement}Finalizado`;
        }

        element.appendChild(badge);
      }
    });
  });
</script>
