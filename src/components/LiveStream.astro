---
import { SALTO_BROADCASTER_ID } from "@/config";
import { getLiveStream } from "@/utils/twitch-runtime";
import TwitchEmbed from "./TwitchEmbed.astro";
import TwitchIcon from "@/icons/Twitch.astro";
import { LucideExternalLink } from "lucide-preact";
const stream = await getLiveStream(SALTO_BROADCASTER_ID);

const PREVIEW = stream?.getThumbnailUrl(1280, 720);
---

{
  stream && (
    <section
      id="live-stream"
      class="max-w-5xl mx-auto flex flex-col items-center justify-center mb-24"
    >
      <p class="font-rubik uppercase text-lg text-center mb-8">
        Mirá la transmisión en vivo de{" "}
        <span class="font-bold text-yellow-500">SaltoUruguayServer</span>
      </p>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 w-full">
        <TwitchEmbed
          channelId={SALTO_BROADCASTER_ID}
          username={stream.userName}
          placeholder={PREVIEW || ""}
          data-title={stream.title}
          extraClasses="col-span-full md:col-span-2"
        />

        <div class="col-span-full md:col-span-1">
          <div class="bg-neutral-950 border border-white/20 border-dashed py-4 px-3 rounded-lg">
            <h2 class="font-rubik text-lg text-white mb-4">Chat en vivo</h2>
            <div class="overflow-y-auto overflow-x-hidden h-96 aspect-[9/16] chat-box w-full scroll-smooth"
            style="scrollbar-width: thin; scrollbar-color: #4B5563 #1F2937;">

            </div>
            <footer class="flex justify-center mt-4">
              <a
                href={`https://www.twitch.tv/${stream.userName}/chat`}
                target="_blank"
                rel="noopener noreferrer"
                class="font-rubik text-yellow-500 hover:underline transition-transform hover:scale-105"
              >
                <LucideExternalLink class="size-6 mr-2 inline" />
                Participar en el chat
              </a>
            </footer>
          </div>
        </div>
      </div>
    </section>

    <template id="chat-message">
      <div class="flex space-x-2 mb-2">
        <img
          src="/favicon.svg"
          alt="Avatar"
          class="size-8 rounded-md border"
        />
        <div class="flex flex-col">
          <p class="font-rubik text-blue-400 username"></p>
          <p class="font-rubik text-sm text-white message text-wrap"></p>
        </div>
      </div>
    </template>
  )
}

<script>
  /* 
    Connect to LiveStream Chat using websockets
  */

import { $ } from "@/lib/dom-selector";

let isChatInitialized = false;

const initChat = () => {
  if (isChatInitialized) return;

  const ws = new WebSocket("wss://irc-ws.chat.twitch.tv:443");

  const SALTO_USERNAME = "SaltoUruguayServer";
  const LIMIT_MESSAGES = 15;
  const LOADED_AVATARS = new Map<string, string>();
    const DECAPI_AVATAR_PREFIX = "https://decapi.me/twitch/avatar/";

  const $messageTemplate = $("#chat-message") as HTMLTemplateElement;

  const $chat = $(".chat-box") as HTMLElement;

  const parseEmotes = (message: string, emotesTag: string) => {
  if (!emotesTag) return message; // Si no hay emotes, devolver el mensaje sin cambios

  const emotes = emotesTag.split("/").map(emote => {
    const [emoteId, positions] = emote.split(":");
    return positions.split(",").map(position => ({
      id: emoteId,
      start: parseInt(position.split("-")[0]),
      end: parseInt(position.split("-")[1]),
    }));
  }).flat();

  // Reemplazar emotes en el mensaje con imágenes
  let parsedMessage = "";
  let lastIndex = 0;

  emotes.sort((a, b) => a.start - b.start).forEach(({ id, start, end }) => {
    parsedMessage += message.slice(lastIndex, start); // Agregar el texto antes del emote
    parsedMessage += `<img src="https://static-cdn.jtvnw.net/emoticons/v2/${id}/default/dark/1.0" class="inline size-5" alt="Emote">`;
    lastIndex = end + 1;
  });

  parsedMessage += message.slice(lastIndex); // Agregar el texto restante
  return parsedMessage;
};
  

const getAvatar = async (username: string) => {
  if (LOADED_AVATARS.has(username)) {
    return LOADED_AVATARS.get(username)!;
  }

  try {
    const response = await fetch(`${DECAPI_AVATAR_PREFIX}${username}`);
    if (!response.ok) throw new Error("Error al obtener avatar");

    const avatarUrl = await response.text();
    LOADED_AVATARS.set(username, avatarUrl); // Almacena el avatar en caché

    return avatarUrl;
  } catch (error) {
    console.error("Fallo al cargar avatar de", username, error);
    return ""; // Retorna un avatar vacío si hay error
  }
};

const handleNewMessage = (message: { avatar: string; username: string; message: string }) => {
  const $message = $messageTemplate.content.cloneNode(true) as HTMLElement;
  const $avatar = $message.querySelector("img") as HTMLImageElement;
  const $username = $message.querySelector(".username") as HTMLElement;
  const $messageText = $message.querySelector(".message") as HTMLElement;

  getAvatar(message.username).then(avatarUrl => {
    $avatar.src = avatarUrl || "https://static-cdn.jtvnw.net/jtv_user_pictures/default-profile_image.png";
  });

  $username.textContent = message.username;
  $messageText.innerHTML = message.message; // Usar innerHTML para renderizar los emotes

  const $el = $chat.appendChild($message);
  $chat.scrollTop = $chat.scrollHeight; // Hacer scroll al último mensaje

  if ($chat.children.length > LIMIT_MESSAGES) {
    $chat.removeChild($chat.children[0]);
  }
};


  const parseTmiMessage = (message: string) => {
  if (message.startsWith("PING")) {
    ws.send("PONG :tmi.twitch.tv");
    return;
  }

  const tagMatch = message.match(/^@(.*?) /);
  const messageParts = message.split("PRIVMSG");

  if (!tagMatch || messageParts.length < 2) {
    return;
  }

  const tags = tagMatch[1];
  const messageText = messageParts[1].split(" :")[1]?.trim();
  if (!messageText) return;

  const tagMap: Record<string, string> = Object.fromEntries(
    tags.split(";").map(tag => tag.split("=").map(decodeURIComponent))
  );

  const parsedMessage = parseEmotes(messageText, tagMap["emotes"]);

  return {
    username: tagMap["display-name"] || "Desconocido",
    avatar: tagMap["user-id"]
      ? `https://static-cdn.jtvnw.net/jtv_user_pictures/${tagMap["user-id"]}-profile_image-70x70.png`
      : "",
    message: parsedMessage,
  };
};




  ws.onopen = function () {
    ws.send("CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership");
    ws.send("PASS SCHMOOPIIE");
    ws.send("NICK justinfan12345");
    ws.send(`JOIN #${SALTO_USERNAME}`);
  };

  ws.onmessage = function (event) {
  const data = event.data.trim();
  
  const messages = data.split("\r\n"); // Twitch puede enviar múltiples mensajes juntos

  messages.forEach((line: string) => {
    const message = parseTmiMessage(line);
    if (message) {
      handleNewMessage(message);
    }
  });
};

  ws.onerror = function (error) {
    console.log("WebSocket error: ", error);
  };

  ws.onclose = function () {
    console.log("WebSocket is closed now.");
  };

};

document.addEventListener("astro:page-load", initChat);

initChat();
</script>
